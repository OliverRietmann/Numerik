import numpy as np

a = 0
b = np.pi

# Gewichte der 3/8 Regel (siehe Handout der Vorlesung)
w = (b - a) / 8.0 * np.array([1.0, 3.0, 3.0, 1.0])

n = len(w) - 1
x = np.linspace(a, b, n + 1)

# Die Quadratur ist gerade folgendes Skalarprodukt:
print(np.dot(np.sin(x), w))

import numpy as np

a = 0.0
b = np.pi
n = 100

x = np.linspace(a, b, n + 1)
y = np.sin(x)

print(np.trapz(y, x))

import numpy as np
import scipy as sp

a = 0
b = np.pi

# np.sin wird direkt Ã¼bergeben
result = np.integrate.quad(np.sin, a, b)

print(result.y)

import numpy as np

# Gewichte der Trapezregel auf [0, 1]
w = 0.5 * np.array([1.0, 1.0])

# Gewichte der Simpsonregel auf [0, 1]
# w = 1.0 / 6.0 * np.array([1.0, 4.0, 1.0])

def composite_rule(w, N):
  m = len(w) - 1
  n = N * (m + 1) - (N - 1)
  v = np.zeros(n)
  for i in range(N):
    a = i * m
    b = (i + 1) * m
    v[a:b + 1] += w
  return v

v = composite_rule(w, 100)
n = len(v)

a = 0.0
b = np.pi
x = np.linspace(a, b, n)
h = (b - a) / (n - 1)

print(np.dot(np.sin(x), h * v))
