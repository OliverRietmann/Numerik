import numpy as np
import matplotlib.pyplot as plt

def explicit_euler(f, t_span, y0, n):
    h = (t_span[1] - t_span[0]) / n
    t = np.linspace(t_span[0], t_span[1], n + 1)
    y = np.empty((n + 1, len(y0)))
    y[0] = y0
    for k in range(n):
        y[k + 1] = y[k] + h * f(t[k], y[k])
    return t, y

M = np.array([[-0.5, 0.0], [0.5, -0.2]])
f = lambda t, y: np.dot(M, y)
t_span = [0.0, 20.0]
y0 = np.array([100.0, 100.0])

t, y = explicit_euler(f, t_span, y0, 200)

plt.figure()
plt.plot(t, y[:, 0], label='Element 1')
plt.plot(t, y[:, 1], label='Element 2')
plt.legend()
plt.show()

import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

M = np.array([[0.0, 1.0], [-1.0, 0.0]])
f = lambda t, y: np.dot(M, y)
t_span = [0.0, 2.0 * np.pi]
z0 = np.array([1.0, 0.0])

t_eval = np.linspace(t_span[0], t_span[1], 100)
sol = sp.integrate.solve_ivp(f, t_span, z0, t_eval=t_eval)
t = sol.t
y = sol.y

plt.figure()
plt.title('Pendulum: Space-Time')
plt.plot(t, y[0], label='position')
plt.plot(t, y[1], label='velocity')
plt.legend()
plt.show()

plt.figure()
plt.title('Pendulum: Phasespace')
plt.plot(y[0], y[1])
plt.show()
