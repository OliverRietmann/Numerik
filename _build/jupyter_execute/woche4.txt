def bisection(f, a, b, tol):
    assert(f(a) * f(b) < 0.0)
    while abs(b-a) > tol:
        m = (a + b) / 2
        fm = f(m)
        if fm == 0.0:
            return m, m
        elif fm * f(b) < 0.0:
            a = m
        else:
            b = m
    return [a, b]

f = lambda x: x**2 - 3.0
a = 1.0
b = 2.0

# sqrt(3) = 1.7320508075688772
print(bisection(f, a, b, 1.0e-3))

def heron(a, x, tol):
    # Ihr Code kommt hier hin.
    return x

a = 3.0
x = 2.0

# sqrt(3) = 1.7320508075688772
print(heron(a, x, 1.0e-3))

def newton(f, df, x, tol):
    while abs(f(x)) > tol:
        x = x - f(x) / df(x)
    return x

f = lambda x: x**2 - 3.0
df = lambda x: 2.0 * x
x = 2.0

# sqrt(3) = 1.7320508075688772
print(newton(f, df, x, 1.0e-3))
