import numpy as np
import matplotlib.pyplot as plt

f = lambda x: x**2 * np.sin(x)
x = np.linspace(2.0, 7.0, 100)
y = f(x)

plt.figure()
plt.plot(x, y)
plt.grid(True)
plt.show()

import numpy as np

f = lambda x: x**2 * np.sin(x)
df = lambda x: 2.0 * np.sin(x) + x**2 * np.cos(x)
ddf = lambda x: (2.0 - x**2) * np.sin(x) + 4.0 * x * np.cos(x)

def newton(f, df, x, tol):
    while np.abs(f(x)) > tol:
        x = x - f(x) / df(x)
    return x

tol = 1.0e-5
for x0 in [3.0, 4.0, 5.0]:
    print(newton(df, ddf, x0, tol))

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-5.0, 5.0, 100 )
y = np.linspace(-5.0, 5.0, 100 )
X, Y = np.meshgrid(x, y)

f1 = lambda x, y: 2.0 * x + 4.0 * y
f2 = lambda x, y: 4.0 * x + 8.0 * y**3

fig, axs = plt.subplots(1, 2, subplot_kw={"projection": "3d"})
axs[0].plot_surface(X, Y, f1(x, y))
axs[1].plot_surface(X, Y, f2(x, y))
plt.show()

import numpy as np

f1 = lambda x, y: 2.0 * x + 4.0 * y
f2 = lambda x, y: 4.0 * x + 8.0 * y**3
f = lambda x, y: np.array([f1(x, y), f2(x, y)])
J = lambda x, y: np.array([[2.0, 4.0], [4.0, 24.0 * y**2]])

def newton(f, J, x, y, tol):
    while np.linalg.norm(f(x, y)) > tol:
        x, y = np.solve(J(x, y), f(x, y))
    return x, y

x0, y0 = (3.0, 2.0)
print(newton(f, J, x0, y0, 1.0e-5))
