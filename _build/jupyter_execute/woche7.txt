import numpy as np

def LUdecomposition(A):
    n = len(A)
    L = np.eye(n)
    U = A
    for k in range(n):
        L[k+1:n, k] = U[k+1:n, k] / U[k, k]
        for j in range(k + 1, n):
            U[j, :] = U[j, :] - L[j, k] * U[k, :]
    return L, U

A = np.array([[1.0, -2.0, -1.0],
              [2.0, -1.0,  1.0],
              [3.0, -6.0, -5.0]])

L, U = LUdecomposition(A)

print(L)
print(U)
print(L @ U)

import numpy as np

def forward(L, b):
    y = np.zeros_like(b)
    for i in range(len(b)):
        y[i] = (b[i] - np.dot(L[i], y)) / L[i, i]
    return y

def backward(U, y):
    x = np.zeros_like(y)
    for i in reversed(range(len(y))):
        x[i] = (y[i] - np.dot(U[i], x)) / U[i, i]
    return x

L = np.array([[1.0, 0.0, 0.0],
              [2.0, 1.0, 0.0],
              [3.0, 0.0, 1.0]])
U = np.array([[1.0, -2.0, -1.0],
              [0.0,  3.0,  3.0],
              [0.0,  0.0, -2.0]])
b = np.array([3.0, 0.0, 3.0])

y = forward(L, b)
x = backward(U, y)

print("y =", y) # [ 3. -6. -6.]
print("x =", x) # [-4. -5.  3.]

import numpy as np

a = 1.0e-20
A = np.array([[a, 1.0, 0.0],
              [1.0, 0.0, 1.0],
              [1.0, 1.0, 0.0]])
b = np.array([1.0, 1000.0, 1.0])

L, U = LUdecomposition(A)
y = forward(U, b)
x = backward(L, y)

print("x =", x) # [ 3. -6. -6.]

import numpy as np

a = 1.0e-20
A = np.array([[a, 1.0, 0.0],
              [1.0, 0.0, 1.0],
              [1.0, 1.0, 0.0]])
b = np.array([1.0, 1000.0, 1.0])

x = numpy.linalg.solve(A, b)

print("x =", x) # [ 3. -6. -6.]
