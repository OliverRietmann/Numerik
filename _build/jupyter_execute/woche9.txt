import numpy as np
import matplotlib.pyplot as plt

x = np.array([0.0, 0.5, 1.0, 1.5, 2.0])
y = np.array([1.0, 1.0, 0.0, 0.0, 3.0])

V = np.vander(x, increasing=True)
a = np.linalg.solve(V, y)
p = lambda x: sum([a[i] * x**i for i in range(len(a))])

x_values = np.linspace(0.0, 2.0, 100)
y_values = p(x_values)

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x_values, y_values, 'r-')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.array([0.0, 0.5, 1.0, 1.5, 2.0])
y = np.array([1.0, 1.0, 0.0, 0.0, 3.0])

a = np.polyfit(x, y, len(x) - 1)

x_values = np.linspace(0.0, 2.0, 100)
y_values = np.polyval(a, x_values)

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x_values, y_values, 'r-')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.array([0.0, 0.5, 1.0, 1.5, 2.0])
y = np.array([1.0, 1.0, 0.0, 0.0, 3.0])

def Lagrange_factory(x, i):
    xi = x[i]
    x_without_i = np.delete(x, [i])
    return lambda z: np.prod([(z - xk) / (xi - xk) for xk in x_without_i], axis=0)

n = len(x)
l = [Lagrange_factory(x, i) for i in range(n)]

x_values = np.linspace(0.0, 2.0, 100)
y_values = sum(y[i] * l[i](x_values) for i in range(n))

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x_values, y_values, 'k-', label=r"$p_{0}(x)$".format(n + 1))
for i in range(n):
	plt.plot(x_values, l[i](x_values), '--', label=r"$l_{0}(x)$".format(i))
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.array([0.0, 0.5, 1.0, 1.5, 2.0])
y = np.array([1.0, 1.0, 0.0, 0.0, 3.0])

x_values = np.linspace(0.0, 2.0, 100)
y_values = np.interp(x_values, x, y)

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x_values, y_values, 'r-')
plt.show()
