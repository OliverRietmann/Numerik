import numpy as np
import matplotlib.pyplot as plt

x = np.array([0.0, 0.5, 1.0, 1.5, 2.0])
y = np.array([1.0, 1.0, 0.0, 0.0, 3.0])

V = np.vander(x, increasing=True)
a = np.linalg.solve(A, y)

p = lambda x: sum([a[i] * x**i for i in range(len(a))])

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x, p(x), 'r-')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

n = 30
x = np.linspace(-2.5, 2.5, n)
noise = 0.5 * np.random.rand(n) - 0.25
y = np.tanh(x) + noise

A = np.column_stack((np.ones(n), x, x**2, x**3))
AT = np.transpose(A)
p = np.linalg.solve(AT @ A, np.dot(AT, y))
print(p)

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x, np.dot(A, p), 'r-')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

n = 30
x = np.linspace(-2.5, 2.5, n)
noise = 0.5 * np.random.rand(n) - 0.25
y = np.tanh(x) + noise

degree = 3
p = np.polyfit(x, y, degree)
print(p)

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x, np.polyval(p, x), 'r-')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

n = 30
x = np.linspace(-5.0, 5.0, n)
noise = 0.5 * np.random.rand(n) - 0.25
y = np.sin(x) + 0.5 * x + noise

A = np.column_stack((np.sin(x), x))
AT = np.transpose(A)
p = np.linalg.solve(AT @ A, np.dot(AT, y))
print(p)

plt.figure()
plt.plot(x, y, 'bo')
plt.plot(x, np.dot(A, p), 'r-')
plt.show()
